import React, { useState, useEffect } from 'react';
import { Home, Download, Star } from 'lucide-react';
import { Link } from 'react-router-dom';
import CustomButton from './CustomButton';
import Rating from './Rating';
import { toast } from 'sonner';

interface TestingPageProps {
  type: 'api' | 'stress';
  domain: string;
  onGoHome: () => void;
}

const TestingPage: React.FC<TestingPageProps> = ({ type, domain, onGoHome }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [scenarios, setScenarios] = useState('');
  const [additionalRequirements, setAdditionalRequirements] = useState('');
  const [showRating, setShowRating] = useState(false);
  
  useEffect(() => {
    setIsLoading(true);
    
    const timer = setTimeout(() => {
      const exampleScenarios = generateExampleScenarios(domain, type);
      setScenarios(exampleScenarios);
      setIsLoading(false);
    }, 3000);
    
    return () => clearTimeout(timer);
  }, [domain, type]);
  
  const handleSubmit = () => {
    if (!additionalRequirements.trim()) {
      toast.error('Please enter your specific requirements');
      return;
    }
    
    setIsLoading(true);
    setTimeout(() => {
      const newScenarios = generateExampleScenarios(domain, type) + 
        `\n\nAdditional scenarios based on your requirements:\n${generateAdditionalScenarios(additionalRequirements)}`;
      setScenarios(newScenarios);
      setIsLoading(false);
      toast.success('Test scenarios updated successfully');
    }, 2000);
  };
  
  const handleDownload = () => {
    const htmlContent = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${domain} ${type.toUpperCase()} Testing Report</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
          h1 { color: #2c5282; border-bottom: 1px solid #e2e8f0; padding-bottom: 10px; }
          pre { background-color: #f7fafc; padding: 15px; border-radius: 5px; white-space: pre-wrap; }
          .footer { margin-top: 30px; font-size: 0.8em; color: #718096; text-align: center; }
        </style>
      </head>
      <body>
        <h1>${domain} ${type.toUpperCase()} Testing Report</h1>
        <p>Generated on: ${new Date().toLocaleString()}</p>
        <pre>${scenarios}</pre>
        <div class="footer">Generated by Gen AI Test-Hub</div>
      </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${domain.toLowerCase()}-${type.toLowerCase()}-testing-report.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Report downloaded successfully');
  };
  
  const handleRating = (rating: number) => {
    toast.success(`Thank you for your ${rating}-star rating!`);
    setShowRating(false);
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <div className="flex justify-between items-center mb-6 pb-4 border-b">
        <h1 className="text-2xl font-semibold">{domain} - {type === 'api' ? 'API' : 'Stress'} Testing</h1>
        <button 
          onClick={onGoHome}
          className="flex items-center gap-2 hover:text-primary transition-colors"
        >
          <Home size={18} />
          <span>Home</span>
        </button>
      </div>
      
      <div className="space-y-8">
        <div className="space-y-4">
          <label className="block font-medium">Generated Test Scenarios:</label>
          <div className="relative min-h-[300px] w-full">
            {isLoading ? (
              <div className="absolute inset-0 flex flex-col items-center justify-center bg-gray-50 rounded-lg">
                <div className="w-8 h-8 border-4 border-t-primary border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin mb-2"></div>
                <p className="text-gray-500">Generating test scenarios...</p>
              </div>
            ) : (
              <textarea
                value={scenarios}
                onChange={(e) => setScenarios(e.target.value)}
                className="w-full h-[300px] p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/50"
              />
            )}
          </div>
        </div>
        
        <div className="space-y-4">
          <label className="block font-medium">Any more specific requirements?</label>
          <textarea
            value={additionalRequirements}
            onChange={(e) => setAdditionalRequirements(e.target.value)}
            placeholder="Enter your specific requirements here..."
            className="w-full h-[100px] p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/50"
          />
        </div>
        
        <div className="flex flex-wrap gap-4 justify-between items-center">
          <div className="flex gap-3">
            <CustomButton onClick={handleDownload} className="flex items-center gap-2">
              <Download size={16} />
              <span>Download Report</span>
            </CustomButton>
            
            <CustomButton 
              onClick={() => setShowRating(true)} 
              variant="outline" 
              className="flex items-center gap-2"
            >
              <Star size={16} fill="#FFD700" />
              <span>Rate Response</span>
            </CustomButton>
          </div>
          
          <CustomButton 
            onClick={handleSubmit}
            disabled={isLoading}
            className="px-8"
          >
            Submit
          </CustomButton>
        </div>
        
        {showRating && (
          <div className="mt-4 p-4 bg-gray-50 rounded-lg flex flex-col items-center gap-3">
            <p className="font-medium">How would you rate the quality of these test scenarios?</p>
            <Rating onChange={handleRating} />
          </div>
        )}
      </div>
    </div>
  );
};

function generateExampleScenarios(domain: string, type: 'api' | 'stress'): string {
  if (domain === 'Loans') {
    if (type === 'api') {
      return `# Loans API Testing Scenarios

1. Test loan application submission API with valid data
2. Test loan application submission API with invalid data
3. Verify loan status retrieval API returns correct status
4. Test loan approval API with authorized user
5. Test loan approval API with unauthorized user
6. Verify loan details retrieval API returns all required fields
7. Test loan repayment API with valid payment amount
8. Test loan repayment API with insufficient payment amount
9. Verify loan history API returns all transactions in chronological order
10. Test loan term modification API with valid parameters
11. Test interest rate calculation API with different loan types
12. Verify credit score integration API returns valid scores
13. Test document upload API with valid file formats
14. Test document upload API with invalid file formats
15. Verify loan eligibility check API with various income levels`;
    } else {
      return `# Loans Stress Testing Scenarios

1. Test system performance with 1000 concurrent loan applications
2. Verify system stability during peak hours (10,000+ users)
3. Test database performance with 1 million loan records
4. Verify API response times under heavy load (5000+ requests/minute)
5. Test system recovery after database failure
6. Verify loan processing pipeline with 10,000 queued applications
7. Test system behavior during network latency spikes
8. Verify document processing system with 10,000 concurrent uploads
9. Test payment processing system with 5000 concurrent transactions
10. Verify report generation with large datasets (100,000+ records)
11. Test system behavior during partial service outages
12. Verify data consistency during high-volume operations
13. Test cache performance under heavy load
14. Verify backup and recovery procedures under stress conditions
15. Test search functionality with large result sets (50,000+ items)`;
    }
  } else {
    if (type === 'api') {
      return `# ${domain} API Testing Scenarios\n\n1. Test endpoint authentication and authorization\n2. Verify correct data retrieval from API endpoints\n3. Test data creation through API with valid inputs\n4. Test API behavior with invalid inputs\n5. Verify API response formats and status codes\n`;
    } else {
      return `# ${domain} Stress Testing Scenarios\n\n1. Test system performance under heavy load\n2. Verify system stability during peak usage periods\n3. Test database performance with large datasets\n4. Verify system recovery after failures\n5. Test concurrent user capacity\n`;
    }
  }
}

function generateAdditionalScenarios(requirements: string): string {
  return `1. Custom test for ${requirements.split(' ').slice(0, 3).join(' ')}...\n2. Specific scenario for ${requirements.split(' ').slice(-3).join(' ')}...\n3. Edge case testing for given requirements...\n4. Validation testing for specific business rules...\n5. Boundary testing for specified conditions...`;
}

export default TestingPage;
